// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id              String           @id @default(cuid())
  name            String
  slug            String           @unique
  description     String
  shortDesc       String?
  basePrice       Decimal          @db.Decimal(10, 2)
  dimensions      Json?
  gallery         Json?
  specifications  Json?
  categoryId      String
  category        Category         @relation(fields: [categoryId], references: [id])
  variants        ProductVariant[]
  orderItems      OrderItem[]
  featured        Boolean          @default(false)
  inStock         Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([categoryId])
  @@index([slug])
}

model ProductVariant {
  id            String  @id @default(cuid())
  productId     String
  product       Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  type          String
  value         String
  priceModifier Decimal @default(0) @db.Decimal(10, 2)
  label         String?
  
  @@index([productId])
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  userId          String?
  user            User?       @relation(fields: [userId], references: [id])
  status          OrderStatus @default(PENDING)
  totalAmount     Decimal     @db.Decimal(10, 2)
  
  // Customer info
  customerEmail   String
  customerName    String
  customerPhone   String
  
  // Shipping address
  shippingStreet  String
  shippingCity    String
  shippingZip     String
  shippingCountry String      @default("PL")
  
  // Additional
  notes           String?
  trackingNumber  String?
  
  orderItems      OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@index([userId])
  @@index([orderNumber])
}

model OrderItem {
  id              String  @id @default(cuid())
  orderId         String
  order           Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId       String
  product         Product @relation(fields: [productId], references: [id])
  quantity        Int
  pricePerUnit    Decimal @db.Decimal(10, 2)
  configuration   Json?
  
  @@index([orderId])
  @@index([productId])
}
